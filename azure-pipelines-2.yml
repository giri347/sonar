# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: windows-latest

stages:
  - stage: dev
    jobs:
      - job: dev
        steps:
          - task: TerraformInstaller@1
            inputs:
             terraformVersion: 'latest'
          - task: TerraformTaskV3@3
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'einfo-terraform'
              backendAzureRmResourceGroupName: 'sa1_test_eic_DevOpslearning'
              backendAzureRmStorageAccountName: 'appstore1516945566'
              backendAzureRmContainerName: 'data'
              backendAzureRmKey: 'terraform.tfstate'
          - task: TerraformTaskV4@4
            inputs:
             provider: 'azurerm'
             command: 'validate'
  - stage: test
    dependsOn: dev
    condition: succeeded()
    jobs:
      - job: test
        steps:
          - task: TerraformInstaller@1
            inputs:
             terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'einfo-terraform'
              backendAzureRmResourceGroupName: 'sa1_test_eic_DevOpslearning'
              backendAzureRmStorageAccountName: 'appstore1516945566'
              backendAzureRmContainerName: 'data'
              backendAzureRmKey: 'terraform.tfstate'
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: 'einfo-terraform'
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: '-auto-approve'
              environmentServiceNameAzureRM: 'einfo-terraform'

          



# variables:
#   solution: '**/*.csproj'
#   buildPlatform: 'Any CPU'
#   buildConfiguration: 'Release'
# steps:
# - task: NuGetToolInstaller@1
# - task: NuGetCommand@2
#   inputs:
#     command: 'restore'
#     restoreSolution: '$(solution)'
# - task: VSBuild@1
#   inputs:
#     solution: '$(solution)'
#     msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'
# - task: PublishBuildArtifacts@1
#   inputs:
#     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#     ArtifactName: 'drop'
#     publishLocation: 'Container'


# - task: AzureRmWebAppDeployment@4
#   inputs:
#     ConnectionType: 'AzureRM'
#     azureSubscription: 'einfo-terraform'
#     appType: 'webAppLinux'
#     WebAppName: 'einfo-webapplinux151694'
#     packageForLinux: '$(Build.ArtifactStagingDirectory)/**/*.zip'